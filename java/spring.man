hello world

    在 idea 中选择新建 project，类型选择 spring，idea 会自动下载需要的 jar。

    以下文件均在 src 目录下新建。它们的名字可以自己起。

    ----HelloWorld.java-------------------------------------
    public class HelloWorld {
        private String name;
        
        public void setName(String name) {
            this.name = name;
        }

        public void sayHello() {
            System.out.println("Hello " + name);
        }
    }
    --------------------------------------------------------

    ----Main.java-(普通)------------------------------------
    public class Main {
        public static void main(String[] args) {
            HelloWorld helloWorld = new HelloWorld();
            helloWorld.setName("Spring");
            helloWorld.sayHello();
        }
    }
    --------------------------------------------------------

    现在可以在左侧 project 文件树中右键点击 Main.java, 选择 debug 运行程序。

    前面是普通的写法。下面使用 spring 框架。
    每个 bean 都是一个 java 类，我们用 property 标签设置它的属性。
    使用框架，可以改变 HelloWorld 类的属性而不影响 java 代码。

    ----spring-config.xml-----------------------------------
    <?xml version="1.0" encoding="utf-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
           
        <!-- class 应该使用全名 -->
        <bean id="helloWorld" class="HelloWorld">
            <property name="name" value="Spring"></property>
        </bean>
    </beans>
    --------------------------------------------------------

    下面这个文件中，单击报错位置，使用 alt-enter 完成 import 语句。

    ----Main.java-(框架)------------------------------------
    public class Main {
        public static void main(String[] args) {
            // 读取配置，创建 spring 容器
            ApplicationContext context = new ClassPathXmlApplicationContext("spring-config.xml");
            // 用 FileSystemXmlApplicationContext，需要完整路径
            //ApplicationContext context = new ClassPathXmlApplicationContext("/path/to/spring-config.xml");
            // ApplicationContext 包含 BeanFactory 的所有功能，通常用前者即可
            //XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource("spring-config.xml"));
            // 传入 id，从容器中获取 bean 实例
            HelloWorld helloWorld = (HelloWorld)context.getBean("helloWorld");
            helloWorld.sayHello();
        }
    }
    --------------------------------------------------------

config

    <!-- id 和 class 必填，其它可选 -->
    <bean id="myBean" class="MyBean" parent=""
        lazy-init="true/false"
        abstract="true/false"
        init-method="init" destroy-method="destroy"
        scope="singular/prototype"
        autowire="byName/byType/constructor">

lifecycle

    public class MyBean implements InitializingBean {
        @Override
        void afterPropertiesSet() throws Exception {

        }
    }

    public class MyBean implements DisposableBean {
        @Override
        void destroy() throws Exception {

        }
    }

    但常用的方法是不实现接口，只需设置

        <bean init-method="init" destroy-method="destroy">

    如果所有的 bean 都有相同的生命周期方法接口，可以设置

        <beans default-init-method="init" default-destroy-method="destroy">

    事实上大多数 <bean> 的属性都可以在 <beans> 中设置默认值。

    在非 web 项目中使用 destroy() 时，需要在 Main 函数结束前调用

        context.registerShutdownHook();

dependency injection

    * 传统依赖：

    public class TextEditor {
        private SpellChecker spellChecker;  
        public TextEditor() {
            spellChecker = new SpellChecker();
        }
    }

    * 控制反转（通过setter）：

    public class TextEditor {
        private SpellChecker spellChecker;
        public void setSpellChecker(SpellChecker spellChecker) {
            this.spellChecker = spellChecker;
        }
    }

    <bean id="textEditor" class="TextEditor">
        <!-- 传对另一个 bean 的引用，用 ref；传值用 value -->
        <property name="spellChecker" ref="spellChecker"/>
    </bean>
    <bean id="spellChecker" class="SpellChecker"/>

    以上 xml 可简写为：
    <bean id="textEditor" class="TextEditor"
        p:spellChecker-ref="spellChecker"/>
    <bean id="spellChecker" class="SpellChecker"/>

    或者等价地，使用内部 bean：
    <bean id="textEditor" class="TextEditor">
        <property name="spellChecker">
            <bean id="spellChecker" class="SpellChecker"/>
        </property>
    </bean>

    * 控制反转（通过构造方法）：

    public class TextEditor {
        private SpellChecker spellChecker;
        public TextEditor(SpellChecker spellChecker) {
            this.spellChecker = spellChecker;
        }
    }

    <bean id="textEditor" class="TextEditor">
        <!-- index 和 type 都是可选的 -->
        <constructor-arg index="0" type="SpellChecker" ref="spellChecker"/>
    </bean>

collection

    <!-- java.util.List -->
    <property name="myList">
        <list>
            <value>v1</value>
            <value>v2</value>
            <value>v3</value>
        </list>
    </property>

    <!-- java.util.Set -->
    <property name="mySet">
        <set>
            <value>v1</value>
            <value>v2</value>
            <value>v3</value>
        </set>
    </property>

    <!-- java.util.Map -->
    <property name="myMap">
        <map>
            <entry key="1" value="v1"/>
            <entry key="2" value="v2"/>
            <entry key="3" value="v3"/>
        </map>
    </property>

    <!-- java.util.Properties -->
    <property name="myProp">
        <props>
            <prop key="1" value="v1"/>
            <prop key="2" value="v2"/>
            <prop key="3" value="v3"/>
        </props>
    </property>

annotation

    <beans>
        <context:annotation-config/>
    </beans>

    @Required 注解，用在 java 文件的 setter 方法上。
    如果相应属性没有在 xml 中配置，将得到一个异常。

    @Autowired 注解，可以用在引用了其它 bean 的 setter 方法、属性或构造函数上。
    相应属性不需要在 xml 中配置。

    @Resource(name="") 注解也可以引用一个 bean

    @Qualifier 将相同类型的 bean 区分开

    @PostConstruct 和 @PreDestroy 可以控制生命周期

configuration class

    与 XML 配置
    <beans>
        <bean id="helloWorld" class="com.tutorialspoint.HelloWorld" />
    </beans>

    等价的写法：
    @Configuration // 这样的类称为配置类
    public class HelloWorldConfig {
        @Bean 
        public HelloWorld helloWorld() {
            return new HelloWorld();
        }
    }

    并用下面的代码加载：
    ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfig.class); 
    HelloWorld helloWorld = context.getBean(HelloWorld.class);

    @Import(MyConfig.class) 用于导入一个配置类

    @Bean(initMethod = "init", destroyMethod = "cleanup") 又一种生命周期配置

    @Scope("prototype") 指定 bean 的范围

spring mvc

    1. hello world

    在 idea 中新建 project，选择 spring mvc。

    sprint-mvc-demo
    |-- src // java 源码
    |   `-- com.demo
    |       `-- HelloController.java
    `-- web
        |-- WEB-INF
        |   |-- classes // 编译得到的 class 文件
        |   |-- lib     // jar 包
        |   |-- web.xml // 主配置文件
        |   `-- myservlet-servlet.xml
        `-- index.jsp
     
    ----index.jsp-------------------------------------------
    <%@ page contentType="text/html; charset=UTF-8" %>
    <html>
    <head>
      <title>Hello world</title>
    </head>
    <body>
      <h1>${message}</h1>
    </body>
    </html>
    --------------------------------------------------------

    ----HelloController.java--------------------------------
    package com.demo;
    import ...

    @Controller // 一个控制器类
    @RequestMapping("/hello") // url
    public class HelloController {
        @RequestMapping(method = RequestMethod.GET) // get 请求
        public String sayHello(ModelMap model) {
            model.addAttribute("message", "Hello world!"); // 向 jsp 页面传参
            return "index"; // jsp 文件名
        }
    }
    --------------------------------------------------------

    ----web.xml---------------------------------------------
    <web-app ...>
       <display-name>My Spring MVC App</display-name>
     
       <servlet>
          <!-- 对应的 bean 的配置文件为 myservlet-servlet.xml -->
          <servlet-name>myservlet</servlet-name>
          <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
          <load-on-startup>1</load-on-startup>
       </servlet>
     
       <servlet-mapping>
          <servlet-name>myservlet</servlet-name>
          <url-pattern>/</url-pattern>
       </servlet-mapping>
    </web-app>
    --------------------------------------------------------

    ----myservlet-servlet.xml-------------------------------
    <beans ...>
        <context:component-scan base-package="com.demo" />
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <property name="prefix" value="/"/>
            <property name="suffix" value=".jsp"/>
        </bean>
    </beans>
    --------------------------------------------------------

    让 idea 自动添加依赖的 jar 包到 WEB-INF/lib 目录下。
    选择 build -> build artifacts 将项目编译成 spring-mvc-demo.war
    放入 tomcat/webapps 目录中。启动 tomcat，访问
    localhost:8080/spring-mvc-demo/hello
    如果直接访问 localhost:8080/spring-mvc-demo/index.jsp，将看不到 ${message}。

    2. student 表单

    让我们在 hello world 的基础上继续。

    ----student.jsp-----------------------------------------
    <%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
    <html>
    <head>
      <title>Spring MVC Form Handling</title>
    </head>
    <body>

    <h1>Student</h1>
    <form:form method="POST" action="/spring-mvc-demo/addStudent">
      <table>
        <tr>
          <td><form:label path="id">id</form:label></td>
          <td><form:input path="id" /></td>
        </tr>
        <tr>
          <td><form:label path="age">age</form:label></td>
          <td><form:input path="age" /></td>
        </tr>
        <tr>
          <td><form:label path="name">name</form:label></td>
          <td><form:input path="name" /></td>
        </tr>
        <tr>
          <td colspan="2">
            <input type="submit" value="submit"/>
          </td>
        </tr>
      </table>  
    </form:form>
    </body>
    </html>
    --------------------------------------------------------

    ----result.jsp------------------------------------------
    <%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
    <html>
    <head>
      <title>Spring MVC Form Handling</title>
    </head>
    <body>

    <h1>Submit Success</h1>
      <table>
        <tr>
          <td>ID</td>
          <td>${id}</td>
        </tr>
        <tr>
          <td>Age</td>
          <td>${age}</td>
        </tr>
        <tr>
          <td>Name</td>
          <td>${name}</td>
        </tr>
      </table>  
    </body>
    </html>
    --------------------------------------------------------

    ----Student.java----------------------------------------
    package com.demo;

    public class Student {
        private Integer id;
        private Integer age;
        private String name;
        // 使用 idea 右键菜单的 generate... 来生成所有属性的 getter 和 setter
    }
    --------------------------------------------------------

    ----StudentController.java------------------------------
    package com.demo;

    @Controller
    public class StudentController {
        @RequestMapping(value = "/student", method = RequestMethod.GET)
        public ModelAndView student() {
            return new ModelAndView("student", "command", new Student());
        }

        @RequestMapping(value = "/addStudent", method = RequestMethod.POST)
        public String addStudent(@ModelAttribute("SpringWeb")Student student, ModelMap model) {
            model.addAttribute("id", student.getId());
            model.addAttribute("age", student.getAge());
            model.addAttribute("name", student.getName());
            return "result";
        }
    }
    --------------------------------------------------------

servlet

    ----MyServlet.java--------------------------------------
    public class MyServlet extends HttpServlet {
        @Override
        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
            String name = ParamUtils.getString(request,"name", "Fran");
            int age = ParamUtils.getInt(request, "age", 0);

            response.setCharacterEncoding("UTF-8");
            response.setHeader("content-type","text/html;charset=UTF-8");
            response.getWriter().write("Don't panic, " + name + "! You are " + age + " now.");
        }

        @Override
        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
            this.doPost(request, response);
        }
    }
    --------------------------------------------------------

jdbc

    src
    |-- com.jdbcdemo
    |   |-- model
    |   |   `-- Customer.java
    |   |-- dao
    |   |   |-- impl
    |   |   |   `-- CustomerDaoImpl.java
    |   |   `-- CustomerDao.java (interface)
    |   `-- Main.java
    `-- spring.xml

    ----customer.sql----------------------------------------
    create table customer (
        id int(10) primary key,
        name varchar(100),
        age int(10) unsigned
    );
    --------------------------------------------------------

    model:
    ----Customer.java---------------------------------------
    public class Customer {
        private int id;
        private String name;
        private int age;
        // getters & setters
    }
    --------------------------------------------------------

    Data Access Object:
    增 insert
    删 delete
    改 update
    查 query
    ----CustomerDao.java------------------------------------
    public interface CustomerDao {
        void insert(Customer customer);
        Customer query(int id);
    }
    --------------------------------------------------------

    DAO implement:
    ----CustomerDaoImpl.java--------------------------------
    public class CustomerDaoImpl extends JdbcDaoSupport implements CustomerDao {
        public void insert(Customer customer) {
            getJdbcTemplate().update(
                "INSERT INTO CUSTOMER (ID, NAME, AGE) VALUES (?, ?, ?)",
                new Object[] { customer.getId(), customer.getName(), customer.getAge() }
            );
        }

        public void query(int id) {
            return getJdbcTemplate().queryForObject(
                "SELECT * FROM CUSTOMER WHERE ID = ?",
                ParameterizedBeanPropertyRowMapper.newInstance(Customer.class),
                id
            );
        }
    }
    --------------------------------------------------------

    ----spring.xml------------------------------------------
    <beans ...>
        <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
            <property name="driverClassName" value="com.mysql.jdbc.Driver" />
            <property name="url" value="jdbc:mysql://localhost:3306/dbname" />
            <property name="username" value="root" />
            <property name="password" value="password" />
        </bean>
        <bean id="customerDao" class="com.jdbcdemo.dao.impl.CustomerDaoImpl">
            <property name="dataSource" ref="dataSource" />
        </bean>
    </beans>
    --------------------------------------------------------

    ----Main.java-------------------------------------------
    public class Main {
        public static void main(String[] args) {
            ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
            CustomerDao customerDao = (CustomerDao)context.getBean("customerDao");
            customerDao.insert(new Customer(1, "Fran", 20));
        }
    }
    --------------------------------------------------------
