----install-configure---------------------------------------------------

mariadb - a replacement for mysql

	$ sudo apt install mariadb-server

	optional:

	$ sudo apt install mariadb-client-core-10.1

	optional: install workbench (free) or navicat (14 days trial) to work
	under GUI.

secure configuration

	set root password:

	$ sudo mysqladmin -u root password

	reset root password:

	$ sudo mysqladmin -u root -p password

	on first installation run this to configure more:
	
	$ sudo mysql_secure_installation

mysql server - turn on and off

	check if mysql server is running:

	$ systemctl status mysql.service
or	$ ps -ef | grep mysqld

	start mysql server:

	$ sudo service mysql start
or	$ sudo mysqld_safe

	turn off mysql server:

	$ sudo service mysql stop
or	$ sudo mysqladmin -u root -p shutdown

	restart mysql server:

	$ sudo service mysql restart

errors

	/var/log/mysql/error.log

login

	$ sudo mysql -u root -p
or	$ mysql -u username -p

	to login without sudo:

	$ sudo mysql -u root
	> select user, host from mysql.user;
	> drop user 'root'@'localhost';
	> create user 'root'@'%' identified by '';
	> grant all privileges on *.* to 'root'@'%' with grant option;
	> flush privileges;

enable foreign access to database

	[warning] this may let others visit your database

	show current access privileges:

	$ netstat -an | grep 3306

	::3306 means foreign access is already granted.
	127.0.0.1:3306 means only localhost is granted, you need to do as
	follow:

	$ sudo vim /etc/mysql/mysql.conf.d/mysql.cnf

	find the line 'bind-address=127.0.0.1' and comment it.
	login to mysql as root, then:

	> use mysql;
	> update user set host='%' where user='root' and host='localhost';
	> select host, user from user;
	> flush privileges;

	exit and restart mysql service.

create user

	login as root

	> create user '<user>'@'%' identified by '<password>';

	'%' is a shorthand for 'localhost'

	> grant all privileges on <database>.<table> to '<user>'@'%'
	  identified by '<password>' with grant option;
	> flush privileges;

	see username's privileges

	> show grants for 'username'@'%';

	revoke (withdraw) privileges

	> revoke create on database.table from 'username'@'%';

	delete user

	> drop user 'username'@'%';

	[NOTE]
	1. 'all privileges' can be replaced by SELECT, CREATE, DROP and so on.
	2. 'with grant option' allows the new user to grant his privileges to
	   others.

----query---------------------------------------------------------------

wildcards

	* for zero or more characters
	% for one or more characters
	_ for one character

info

	> status;
	> select version();

show

	> show databases;

	(after use a table)
	> show tables;
	> show columns from <table>;
	> show index from <table>;
	> show table status [from <database>] [like 'pattern'] \g;

create database
	
	> create database <database>;

use database - a bit like unix command cd

	> use <database>;

create and drop table

	> create table <table> (
		<attr1> <type1>(<size>),
		<attr2> <type2>(<size>),
		...
		<attrn> <typen>(<size>)
	);

	> drop table <table>;

	================
	type		byte
	----------------
	char		1
	tinyint		1
	smallint	2
	int			4
	bigint		8
	================

select from table

	> select [distinct] <columns> [as <alias>] from <table>
	  where <condition>;

	example:
	> select * from <table>;		# show everything from table

add and delete columns

	> alter table <table> add <attr> <type>(<size>);
	> alter table <table> drop <attr>;

add alter and delete rows

	> insert into <table> (<attr1>, <attr2>, ..., <attrn>)
	  value (<val1>, <val2>, ..., <valn>);

	use 'values' instead of 'value' is also acceptable

	> update <table> set <attr>=<val> where <condition>;

	> delete from <table> where <condition>;

example

	> create database company;
	> use company;
	> create table people (
		name varchar(50),
		gender varchar(6),
		age int(3),
		address varchar(50)
	);
	
	add/delete columns
	> alter table people add id int(10);
	> alter table people drop address;

	add a new record
	> insert into people (name, gender, age) value ('Adam', 'male', 20);

	change an existing record
	> update people set id=1 where name='Adam';

	then insert more columns:
	> insert into people (name, gender, age, id) value ('Bob', 'male', 20,
	  2);
	> insert into people (name, gender, age, id) value ('Alice', 'female',
	  18, 3);
	> insert into people (name, gender, age, id) value ('Dalia', 'female',
	  22, 4);

advanced select example

	* where

	> select * from people where gender='female';
	> select * from people where age between 18 and 20;
	> select * from people where age >= 18 and age <= 20;

	==============================
	relational operators

		=		euqal
		<>		inequal
		<		┐
		>		│
		<=		├→ you know
		>=		│
		between	┘
		like	search for pattern
	==============================

	* order (default ascend)

	> select * from people order by age asc;
	> select * from people order by age desc, id desc;

	* concat

	> select concat(name, ' is ', age, ' years old') from people;

	* group by

	> select continent, sum(GNP) from country group by continent;
	> select continent, sum(GNP) from country group by continent having
		sum(GNP) > 1000000;

	=========================
	statistics functions

		sum count avg max min
	=========================

	* A join B on condition

	select from more than one tables

	> select district, continent from city join country
	  on city.countrycode = country.code
	  where city.name = 'Wuhan';

primary key

	used to identify a record. id must distinct from each other.
	set primary key on creating table:

	> create table people(
		id int(18) primary key,
		...
	);

	or alter it later:

	> alter table people add primary key(id);

save result in a new table

	> create table result(
		city varchar(50),
		population int(11),
		countrycode varchar(4)
	);

	> insert into result
		select name, population, countrycode from city
		where population between 2000000 and 5000000;

----import-&-export------------------------------------------------------

export to backup

	backup a database

	$ mysqldump -u <username> -p <db> <table1> <table2> ... > backup.sql

	backup databases

	$ mysqldump -u <username> -p --databases <db1> <db2> ... > backup.sql

	backup everything

	$ mysqldump -u <username> -p -all-databases > backup.sql

import from mysqldump

	mysql -u <username> -p < backup.sql

mysqlhotcopy -- a useful tool for mysql backup

	download perl support: http://dev.mysql.com/downloads/dbi.html
	this tool supports tables of MyISAM type only,
	tables of InnoDB type cannot be copied directory

	$ mysqlhotcopy [option] <db1> <db2> ... backup_dir/

import from excel

	export excel file as .csv file (in utf-8 encoding)
	in mysql workbench, rightclick table -> import wizard -> next -> next
	-> next -> waiting... -> ok

import from text file

	each column is separated with a tab,
	each row is separated with a linebreak

	> load data local infile '<file>' into table <tablename>

----termux-mariadb------------------------------------------------------

install

	$ apt install mariadb
	$ mysql_install_db

start

	$ mysqld &
	^C

login as root

	$ mysql -u root

login as user

	$ mysql
